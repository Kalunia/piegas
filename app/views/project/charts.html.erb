<link href="/stylesheets/head.css" rel="stylesheet" type="text/css"  />
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js"></script>
<script src="http://code.highcharts.com/highcharts.js"></script>
<script src="http://code.highcharts.com/modules/exporting.js"></script>
<script type="text/javascript" src="http://canvg.googlecode.com/svn/trunk/rgbcolor.js"></script> 
<script type="text/javascript" src="http://canvg.googlecode.com/svn/trunk/canvg.js"></script>

<script type="text/javascript">

// O código de construcao de Tweets foi inspirado através de 
// https://github.com/lucaong/jQCloud/blob/master/src/jqcloud/jqcloud.js.erb

<% @sentClassifier = StuffClassifier::Bayes.open("Positive vs Negative") %>

(function( $ ) {
  "use strict";
  $.fn.jQCloud = function(word_array, options) {
    var $this = this;
    var cloud_namespace = $this.attr('id') || Math.floor((Math.random()*1000000)).toString(36);
    var default_options = {
      width: $this.width(),
      height: $this.height(),
      center: {
        x: ((options && options.width) ? options.width : $this.width()) / 2.0,
        y: ((options && options.height) ? options.height : $this.height()) / 2.0
      },
      delayedMode: word_array.length > 50,
      shape: false,
      encodeURI: true,
      removeOverflowing: true
    };

    options = $.extend(default_options, options || {});

    $this.addClass("jqcloud").width(options.width).height(options.height);

    if ($this.css("position") === "static") {
      $this.css("position", "relative");
    }

    var drawWordCloud = function() {
      var hitTest = function(elem, other_elems) {
        var overlapping = function(a, b) {
          if (Math.abs(2.0*a.offsetLeft + a.offsetWidth - 2.0*b.offsetLeft - b.offsetWidth) < a.offsetWidth + b.offsetWidth) {
            if (Math.abs(2.0*a.offsetTop + a.offsetHeight - 2.0*b.offsetTop - b.offsetHeight) < a.offsetHeight + b.offsetHeight) {
              return true;
            }
          }
          return false;
        };
        var i = 0;
        for(i = 0; i < other_elems.length; i++) {
          if (overlapping(elem, other_elems[i])) {
            return true;
          }
        }
        return false;
      };

      for (var i = 0; i < word_array.length; i++) {
        word_array[i].weight = parseFloat(word_array[i].weight, 10);
      }

      word_array.sort(function(a, b) { if (a.weight < b.weight) {return 1;} else if (a.weight > b.weight) {return -1;} else {return 0;} });

      var step = (options.shape === "rectangular") ? 18.0 : 2.0,
          already_placed_words = [],
          aspect_ratio = options.width / options.height;

      var drawOneWord = function(index, word) {
        var word_id = cloud_namespace + "_word_" + index,
            word_selector = "#" + word_id,
            angle = 6.28 * Math.random(),
            radius = 0.0,

            steps_in_direction = 0.0,
            quarter_turns = 0.0,

            weight = 5,
            inner_html = "",
            color = 'yellow',
            word_span;

        word.html = $.extend(word.html, {id: word_id});

        if (word.html && word.html["class"]) {
          color = word.html["class"];
          delete word.html["class"];
        }

        if (word_array[0].weight > word_array[word_array.length - 1].weight) {
          weight = Math.round((word.weight - word_array[word_array.length - 1].weight) /
                              (word_array[0].weight - word_array[word_array.length - 1].weight) * 9.0) + 1;
        }
        word_span = $('<span>').attr(word.html).addClass('w' + weight + " " + color);
        inner_html = word.text;
        word_span.append(inner_html);

        if (!!word.handlers) {
          for (var prop in word.handlers) {
            if (word.handlers.hasOwnProperty(prop) && typeof word.handlers[prop] === 'function') {
              $(word_span).bind(prop, word.handlers[prop]);
            }
          }
        }

        $this.append(word_span);

        var width = word_span.width(),
            height = word_span.height(),
            left = options.center.x - width / 2.0,
            top = options.center.y - height / 2.0;

        var word_style = word_span[0].style;
        word_style.position = "absolute";
        word_style.left = left + "px";
        word_style.top = top + "px";
        word_style.color = word.color;

        while(hitTest(word_span[0], already_placed_words)) {
          if (options.shape === "rectangular") {
            steps_in_direction++;
            if (steps_in_direction * step > (1 + Math.floor(quarter_turns / 2.0)) * step * ((quarter_turns % 4 % 2) === 0 ? 1 : aspect_ratio)) {
              steps_in_direction = 0.0;
              quarter_turns++;
            }
            switch(quarter_turns % 4) {
              case 1:
                left += step * aspect_ratio + Math.random() * 2.0;
                break;
              case 2:
                top -= step + Math.random() * 2.0;
                break;
              case 3:
                left -= step * aspect_ratio + Math.random() * 2.0;
                break;
              case 0:
                top += step + Math.random() * 2.0;
                break;
            }
          } else { 
            radius += step;
            angle += (index % 2 === 0 ? 1 : -1)*step;

            left = options.center.x - (width / 2.0) + (radius*Math.cos(angle)) * aspect_ratio;
            top = options.center.y + radius*Math.sin(angle) - (height / 2.0);
          }
          word_style.left = left + "px";
          word_style.top = top + "px";
        }

        if (options.removeOverflowing && (left < 0 || top < 0 || (left + width) > options.width || (top + height) > options.height)) {
          word_span.remove()
          return;
        }


        already_placed_words.push(word_span[0]);

        if ($.isFunction(word.afterWordRender)) {
          word.afterWordRender.call(word_span);
        }
      };
        $.each(word_array, drawOneWord);
        if ($.isFunction(options.afterCloudRender)) {
          options.afterCloudRender.call($this);
        }
    };

    setTimeout(function(){drawWordCloud();}, 10);
    return $this;
  };
})(jQuery);

var word_array = [
          {text: '<%= session[:tag_cloud_words][0] ? session[:tag_cloud_words][0][0] : '' %>', weight: 20,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][0][0]) %>'},

          {text: '<%= session[:tag_cloud_words][1] ? session[:tag_cloud_words][1][0] : ''%>', weight: 19, 
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][1][0]) %>'},

          {text: '<%= session[:tag_cloud_words][2] ? session[:tag_cloud_words][2][0] : ''%>', weight: 18,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][2][0]) %>'},

          {text: '<%= session[:tag_cloud_words][3] ? session[:tag_cloud_words][3][0] : ''%>', weight: 17,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][3][0]) %>'},

          {text: '<%= session[:tag_cloud_words][4] ? session[:tag_cloud_words][4][0] : ''%>', weight: 16,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][4][0]) %>'},

          {text: '<%= session[:tag_cloud_words][5] ? session[:tag_cloud_words][5][0] : ''%>', weight: 15,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][5][0]) %>'},

          {text: '<%= session[:tag_cloud_words][6] ? session[:tag_cloud_words][6][0] : ''%>', weight: 14,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][6][0]) %>'},

          {text: '<%= session[:tag_cloud_words][7] ? session[:tag_cloud_words][7][0] : ''%>', weight: 13,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][7][0]) %>'},

          {text: '<%= session[:tag_cloud_words][8] ? session[:tag_cloud_words][8][0] : ''%>', weight: 12,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][8][0]) %>'},

          {text: '<%= session[:tag_cloud_words][9] ? session[:tag_cloud_words][9][0] : ''%>', weight: 11,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][9][0]) %>'},

          {text: '<%= session[:tag_cloud_words][10] ? session[:tag_cloud_words][10][0] : ''%>', weight: 10,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][10][0]) %>'},

          {text: '<%= session[:tag_cloud_words][11] ? session[:tag_cloud_words][11][0] : ''%>', weight: 9,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][11][0]) %>'},

          {text: '<%= session[:tag_cloud_words][12] ? session[:tag_cloud_words][12][0] : ''%>', weight: 8,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][12][0]) %>'},

          {text: '<%= session[:tag_cloud_words][13] ? session[:tag_cloud_words][13][0] : ''%>', weight: 7,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][13][0]) %>'},

          {text: '<%= session[:tag_cloud_words][14] ? session[:tag_cloud_words][14][0] : ''%>', weight: 6,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][14][0]) %>'},

          {text: '<%= session[:tag_cloud_words][15] ? session[:tag_cloud_words][15][0] : ''%>', weight: 5,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][15][0]) %>'},

          {text: '<%= session[:tag_cloud_words][16] ? session[:tag_cloud_words][16][0] : ''%>', weight: 4,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][16][0]) %>'},

          {text: '<%= session[:tag_cloud_words][17] ? session[:tag_cloud_words][17][0] : ''%>', weight: 3,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][17][0]) %>'},

          {text: '<%= session[:tag_cloud_words][18] ? session[:tag_cloud_words][18][0] : ''%>', weight: 2,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][18][0]) %>'},

          {text: '<%= session[:tag_cloud_words][19] ? session[:tag_cloud_words][19][0] : ''%>', weight: 1,
              color: '<%= @sentClassifier.classify_tagword(session[:tag_cloud_words][19][0]) %>'}
      ];

$(function() {
  $("#tag-cloud").jQCloud(word_array);
});


$(document).ready(function() {
      
  $('#piechart').highcharts({
      chart: {
          plotBackgroundColor: null,
          plotBorderWidth: null,
          plotShadow: false,
          backgroundColor: null
      },
      title: {
          text: 'Gráfico de seções - avaliações positivas, negativas e neutras',
          color: 'black'
      },
      tooltip: {
        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
      },
      plotOptions: {
          pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                  enabled: true,
                  color: 'black',
                  connectorColor: '#000000',
                  formatter: function() {
                      return '<b>'+ this.point.name +'</b>: '+ this.percentage +' %';
                  }
              }
          }
      },
      series: [{
          type: 'pie',
          data: [
              {
                  name: 'Positivos',
                  y: <%= session[:positives] %>,
                  selected: true,
                  color: 'green'
              },
              {
                  name: 'Negativos',
                  y: <%= session[:negatives] %>,
                  color: 'red'
              },
              {
                  name: 'Neutros',
                  y: <%= session[:neutros] %>,
                  color: 'gray'
              },
              <% if user_signed_in? and current_user.anti_spam == 1 %>
              {
                  name: 'Spams',
                  y: <%= session[:spams] %>,
                  color: 'brown'
              }
              <% end %>
          ]
      }]
  });
      
    $('#barchart').highcharts({
          chart: {
              type: 'bar'
          },
          title: {
              text: 'Gráfico de Barras - Avaliações positivas, negativas e neutras'
          },
          subtitle: {
              text: 'Pesquisa: <%= session[:product] %>'
          },
          xAxis: {
              <% if user_signed_in? and current_user.anti_spam == 1 %>
                categories: ['Positivos', 'Negativos', 'Neutros', 'Spams'],
              <% else %>
                categories: ['Positivos', 'Negativos', 'Neutros'],
              <% end %>
              title: {
                  text: null
              }
          },
          yAxis: {
              min: 0,
              title: {
                  text: 'Tweets',
                  align: 'high'
              },
              labels: {
                  overflow: 'justify'
              }
          },
          tooltip: {
              valueSuffix: ' Comentários'
          },
          plotOptions: {
              bar: {
                  dataLabels: {
                      enabled: true
                  }
              }
          },
          legend: {
              layout: 'vertical',
              align: 'right',
              verticalAlign: 'top',
              x: -40,
              y: 100,
              floating: true,
              borderWidth: 1,
              backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor || '#FFFFFF'),
              shadow: true
          },
          credits: {
              enabled: false
          },
          series: [{
              name: 'Tweets',
              <% if user_signed_in? and current_user.anti_spam == 1 %>
                data: [<%= session[:positives] %>, <%= session[:negatives] %>, <%= session[:neutros] %>, <%= session[:spams] %>]
              <% else %>
                data: [<%= session[:positives] %>, <%= session[:negatives] %>, <%= session[:neutros] %>]
              <% end %>
          }]
      });
    });
</script>

   
</script>

<div class="row">
  <div class="col-lg-12" style="margin-top: 45px;">
    <h1>Gráficos do resultado</h1>
  </div>
</div>

<h3 align="center"> Nuvem de palavras </h3>
<div id="tag-cloud" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<br /><br/>
<div id="piechart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
<br /><br/>
<div id="barchart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
